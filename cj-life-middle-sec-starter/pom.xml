<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>cj.life.middle</groupId>
        <artifactId>cj-life-middle-sec</artifactId>
        <version>1.0.0</version>
    </parent>
    <groupId>cj.life.middle</groupId>
    <artifactId>cj-life-middle-sec-starter</artifactId>
    <version>${cj-life-middle-sec-starter.version}</version>
    <name>cj-life-middle-sec-starter</name>
    <description>cj-life-middle-sec-starter</description>
    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
    </properties>
    <dependencies>
        <dependency>
            <groupId>cj.life</groupId>
            <artifactId>cj-life-ability-util</artifactId>
            <version>0.0.1</version>
        </dependency>
        <dependency>
            <groupId>cj.life</groupId>
            <artifactId>cj-life-ability-swagger</artifactId>
            <version>0.0.1</version>
        </dependency>
        <dependency>
            <groupId>cj.life</groupId>
            <artifactId>cj-life-ability-api</artifactId>
            <version>0.0.1</version>
        </dependency>
        <dependency>
            <groupId>cj.life</groupId>
            <artifactId>cj-life-ability-eureka</artifactId>
            <version>0.0.1</version>
        </dependency>
        <dependency>
            <groupId>cj.life</groupId>
            <artifactId>cj-life-ability-config</artifactId>
            <version>0.0.1</version>
        </dependency>
        <dependency>
            <groupId>cj.life.middle</groupId>
            <artifactId>cj-life-middle-sec-framework</artifactId>
            <version>${cj-life-middle-sec-framework.version}</version>
        </dependency>
        <dependency>
            <groupId>cj.life.middle</groupId>
            <artifactId>cj-life-middle-sec-remote</artifactId>
            <version>${cj-life-middle-sec-remote.version}</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                    <image>
                        <builder>paketobuildpacks/builder:tiny</builder>
                        <env>
                            <BP_NATIVE_IMAGE>true</BP_NATIVE_IMAGE>
                        </env>
                    </image>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.2</version>
                <!--将插件绑定在某个phase执行-->
                <executions>
                    <execution>
                        <id>build-image</id>
                        <!--用户只需执行mvn package ，就会自动执行mvn docker:build-->
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--指定生成的镜像名,这里是我们的作者名+项目名-->
                    <imageName>life/middle-sec</imageName>
                    <!--指定标签 这里指定的是镜像的版本，我们默认版本是latest-->
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <!--指定基础镜像jdk1.8-->
                    <baseImage>java:8</baseImage>
                    <!--
                    镜像制作人本人信息-->
                    <maintainer>carocean.jofers@outlook.com</maintainer>
                    <!--切换到ROOT目录-->
                    <workdir>/life</workdir>
                    <!--查看我们的java版本-->
                    <cmd>["java", "-version"]</cmd>
                    <!--${project.build.finalName}.jar是打包后生成的jar包的名字-->
                    <entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint>
                    <exposes>
                        <!--（！！！）这个暴露接口也要变化 -->
                        <expose>30000</expose>
                    </exposes>
                    <!--docker的环境变量模拟在docker run 命令于中输入 -e 变量名-->
                    <!--此处定义的值是dockerfile运行时的默认值，在用docker-compose或run启动时可通过-e参数覆盖掉-->
                    <env>
                        <cj.life.spring.profiles.active>prod</cj.life.spring.profiles.active>
                        <cj.life.EUREKA_SERVER_URL>http://localhost:8761/eureka</cj.life.EUREKA_SERVER_URL>
                        <cj.life.spring.data.elasticsearch.repositories.enabled>true</cj.life.spring.data.elasticsearch.repositories.enabled>
                        <cj.life.spring.elasticsearch.uris>https://localhost:9200</cj.life.spring.elasticsearch.uris>
                        <cj.life.spring.elasticsearch.username>elastic</cj.life.spring.elasticsearch.username>
                        <cj.life.spring.elasticsearch.password>elastic123</cj.life.spring.elasticsearch.password>
                        <cj.life.spring.elasticsearch.connection-timeout>5000</cj.life.spring.elasticsearch.connection-timeout>
                        <cj.life.spring.elasticsearch.socket-timeout>30</cj.life.spring.elasticsearch.socket-timeout>
                        <cj.life.spring.elasticsearch.path-prefix></cj.life.spring.elasticsearch.path-prefix>
                    </env>
                    <!--指定远程 docker api地址 远程仓库-->
                    <!--                    <dockerHost>http://localhost:2375</dockerHost>-->
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/life</targetPath>
                            <!--jar 包所在的路径  此处配置的 即对应 target 目录-->
                            <directory>${project.build.directory}</directory>
                            <!--用于指定需要复制的文件 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>